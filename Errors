from numpy import array

# Here I just define the constants!
p=10
s=0.05
K=100
M=100
N_max=100


# Here I load everything
a=numpy.loadtxt("./ensambleN.txt")
ensN=a.transpose()
a=numpy.loadtxt("./ensamblex.txt")
ensx=a.transpose()
time=numpy.loadtxt("./time.txt")

TMAX=len(time)


#Here I define all the arrays i will need
N=range(TMAX)
x=range(TMAX)
Nstd=range(TMAX)
xstd=range(TMAX)
Nerrorstdplus=range(TMAX)
xerrorstdplus=range(TMAX)
Nerrorstdminus=range(TMAX)
xerrorstdminus=range(TMAX)
Nerrorabsplus=range(TMAX)
xerrorabsplus=range(TMAX)
Nerrorabsminus=range(TMAX)
xerrorabsminus=range(TMAX)

# Support arrays
S=range(N_max)
P=range(N_max)



Root=math.sqrt(N_max)
A=floor(N_max*0.05) # A is how many data I have to trhow away!


# Computing all the arrays
for i in range(TMAX):
	N[i]=ensN[i].mean()
	x[i]=ensx[i].mean()
	Nstd[i]=ensN[i].std()
	xstd[i]=ensx[i].std()
	Nerrorstdplus[i]=N[i]+1.96*Nstd[i]/Root
	Nerrorstdminus[i]=N[i]-1.96*Nstd[i]/Root
	xerrorstdplus[i]=x[i]+1.96*xstd[i]/Root
	xerrorstdminus[i]=x[i]-1.96*xstd[i]/Root
	for j in range(N_max):
		S[j]=ensN[i][j]-N[i]
		P[j]=ensx[i][j]-x[i]
	for dummy in range(A):
		l1=0
		Boh1=0
		l2=0
		Boh2=0
		for j in range(N_max):
			if math.fabs(S[j]) > Boh1:
				Boh1=math.fabs(S[j])
				l1=j
			if math.fabs(P[j]) > Boh2:
				Boh2=math.fabs(S[j])
				l2=j
		S[l1]=0
		P[l2]=0
	S.sort()
	P.sort()
	Nerrorabsplus[i]=S[N_max-1]+N[i]
	Nerrorabsminus[i]=S[0]+N[i]
	xerrorabsplus[i]=P[N_max-1]+x[i]
	xerrorabsminus[i]=P[0]+x[i]
	

	
	 

#Plotting x

pylab.plot(time,x,label="data")
pylab.plot(time,xerrorstdplus,'r--', label="std error +")
pylab.plot(time,xerrorstdminus,'r--', label="std error -")
pylab.plot(time,xerrorabsplus,'k--', label="abs error +")
pylab.plot(time,xerrorabsminus,'k--', label="abs error -")
pylab.title("<x> vs. t for p= %s and s= %s for an ensamble of N= %s, K= %s and M= %s with errors"%(p,s,N_max,K,M))
pylab.ylabel("<x>")
pylab.xlabel("t")
legend(("data","std error +","std error -","abs error +","abs error -"))


#Plotting N

pylab.plot(time,N,label="data")
pylab.plot(time,Nerrorstdplus, 'r--',label="std error +")
pylab.plot(time,Nerrorstdminus, 'r--',label="std error -")
pylab.plot(time,Nerrorabsplus,'k--', label="abs error +")
pylab.plot(time,Nerrorabsminus,'k--', label="abs error -")
pylab.title("<N> vs. t for p= %s and s= %s for an ensamble of N= %s, K= %s and M= %s with errors"%(p,s,N_max,K,M))
pylab.ylabel("<N>")
pylab.xlabel("t")
legend(("data","std error +","std error -","abs error +","abs error -"))


#To count how many all cooperators and all defectors I have

fullc=0
fulld=0
others=0

for i in range(N_max):
	if ensx[TMAX-1,i]==1:
		fullc=fullc+1
	else:
		if ensx[TMAX-1,i]<=0:
			fulld=fulld+1
		else:
			others=others+1

print "fullc is", fullc
print "fulld is", fulld
print "others is", others


#  math.fabs(x)
# .index(3)
# .list.sort

